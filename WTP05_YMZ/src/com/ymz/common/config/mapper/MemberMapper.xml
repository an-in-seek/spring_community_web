<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="member.dao.memberMapper">
	<sql id="member-select">
		select 	member_id,
					member_password,
					name,
					nickname,
					birth,
					sex,
					zipcode,
					address,
					detail_address,
					email,
					phoneNo,
					favorite_food,
					mileage,
					grade,
					to_char(to_date(join_date, 'yyyymmdd'), 'yyyy-mm-dd') join_date,
		from		member			
	</sql>
	
	<resultMap type="member" id="member-resultmap">
		<id column="member_id" property="id"/>
		<result column="member_password" property="password"/>
		<result column="name" property="name"/>
		<result column="nickname" property="name"/>
		<result column="birth" property="birth"/>
		<result column="sex" property="sex"/>
		<result column="zipcode" property="zipcode"/>
		<result column="address" property="address"/>
		<result column="detail_address" property="detail_Address"/>
		<result column="email" property="email"/>
		<result column="phone_no" property="phoneNo"/>
		<result column="favorite_food" property="favoriteFood"/>
		<result column="mileage" property="mileage"/>
		<result column="grade" property="address"/>
		<result column="join_date" property="joinDate"/>	
	</resultMap>
	
	<insert id="insertMember" parameterType="member">
		insert into member (id, password, name, nickname, birth, sex, zipcode, address, detail_address, email, phone_no,
							 favorite_food, mileage, grade, join_date)
		values (#{id}, #{password}, #{name},#{nickname},#{birth},#{sex},#{zipcode},#{address},#{detailAddress},#{email},#{phoneNo},
				#{favoriteFood},#{mileage},#{grade}, to_char(sysdate, 'yyyymmdd'),jdbcType=VARCHAR})
	</insert>
	
	<update id="updateMember" parameterType="member">
		update member
		set		member_password=#{password},
					nickname=#{nickname},
					birth=#{birth},
					zipcode=#{zipcode},
					address=#{address},
					detail_address=#{detailAddress},
					email=#{email},
					phone_no=#{phoneNo},
					favorite_food=#{favoriteFood},
		where	id=#{id}
	</update>
	
	<delete id="deleteMemberById" parameterType="string">
		delete from member where id=#{id}
	</delete>
		
	<select id="selectMemberById" parameterType="string" resultMap="member-resultmap">
		<include refid="member-select"/>
		where	id=#{id}
	</select>
	
	<select id="selectAllMember" resultMap="member-resultmap">
		<include refid="member-select"/>
	</select>
	<!-- Paging 추가 -->
	<select id="selectAllMemberPaging" parameterType="map" resultMap="member-resultmap">
		select id, password, name, nickname, birth, sex, zipcode, address, detail_address, email, phone_no,
							 favorite_food, mileage, grade, join_date
		from (
			select ceil(rownum/#{contentsPerPage}) page, iid, password, name, nickname, birth, sex, zipcode, address, detail_address, email, phone_no,
							 favorite_food, mileage, grade, join_date
			from (
					<include refid="member-select"/>
					order by join_date
			)
		) 
		where page = #{pageNo}
	</select>
	<select id="selectTotalMemberCount" resultType="_int">
		select count(id) from member
	</select>
</mapper>
