<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="member.dao.memberMapper">
	<sql id="member-select">
		select 	member_id,
					member_password,
					name,
					nickname,
					birth,
					sex,
					zipcode,
					address,
					detail_address,
					email,
					phone_no,
					favorite_food,
					mileage,
					grade,
					to_char(to_date(join_date, 'yyyymmdd'), 'yyyy-mm-dd') join_date,
					state
		from		member			
	</sql>
	
	<resultMap type="member" id="member-resultmap">
		<id column="member_id" property="id"/>
		<result column="member_password" property="password"/>
		<result column="name" property="name"/>
		<result column="nickname" property="nickname"/>
		<result column="birth" property="birth"/>
		<result column="sex" property="sex"/>
		<result column="zipcode" property="zipcode"/>
		<result column="address" property="address"/>
		<result column="detail_address" property="detailAddress"/>
		<result column="email" property="email"/>
		<result column="phone_no" property="phoneNo"/>
		<result column="favorite_food" property="favoriteFood"/>
		<result column="mileage" property="mileage"/>
		<result column="grade" property="grade"/>
		<result column="join_date" property="joinDate"/>	
		<result column="state" property="state"/>	
	</resultMap>
	
<!-- 	<resultMap type="member" id="member-qna-resultmap" extends="member-resultmap">
		<collection property="QNA" ofType="QNA">
			<id column="qna_no" property="number"/>
			<result column="qna_title" property="title"/>
			<result column="qna_category" property="category"/>
			<result column="qna_registration_date" property="registrationDate"/>
			<result column="qna_hits" property="hits"/>
			<result column="qna_content" property="content"/>
			<result column="member_id" property="memberId"/>
		</collection>
	</resultMap> -->
	
	<insert id="insertMember" parameterType="member">
		insert 	into member 
					(member_id, member_password, name, nickname, birth, sex, zipcode, address, detail_address, email, phone_no, favorite_food, mileage, grade, join_date,state)
		values		(#{id}, #{password}, #{name},#{nickname},#{birth},#{sex},#{zipcode},#{address},#{detailAddress}, #{email},#{phoneNo},#{favoriteFood,jdbcType=VARCHAR},#{mileage},#{grade}, to_char(sysdate, 'yyyymmdd'),'가입')
	</insert>
	
	<update id="updateMember" parameterType="member">
		update member
		set			nickname=#{nickname},
					birth=#{birth},
					zipcode=#{zipcode},
					address=#{address},
					detail_address=#{detailAddress},
					email=#{email},
					phone_no=#{phoneNo},
					mileage=#{mileage}
		where	member_id=#{id}
	</update>
	
	<update id="updatePassword" parameterType="member">
		update member
		set member_password=#{password}
		where member_id=#{id}
	</update>
	
	<update id="deleteMemberById" parameterType="string">
		update 	member 
		set			state='탈퇴'
		where 	member_id=#{id}
	</update>
	
	<!-- category 가져오기 -->
	<select id="selectAllCategory" resultType="hashMap">
		select SECOND_CATEGORY_ID, SECOND_CATEGORY_NAME from SECOND_CATEGORY where FIRST_CATEGORY_ID='F-1'
	</select>
	<select id="selectCategoryId" resultType="string">
		select SECOND_CATEGORY_ID from SECOND_CATEGORY where FIRST_CATEGORY_ID='F-1'
	</select>
	
	<select id="selectCategoryName" resultType="string">
		select SECOND_CATEGORY_NAME from SECOND_CATEGORY where FIRST_CATEGORY_ID='F-1'
	</select>
	<select id="selectMemberById" parameterType="string" resultMap="member-resultmap">
		<include refid="member-select"/>
		where 	member_id=#{id}
	</select>
	
	<select id="selectMemberByEmail" parameterType="string" resultMap="member-resultmap">
		<include refid="member-select"/>
		where 	email=#{email}
	</select>
	
	<select id="selectMemberByNickname" parameterType="string" resultMap="member-resultmap">
		<include refid="member-select"/>
		where	 nickname=#{nickname}
	</select>
	
	<select id="selectMemberByName" parameterType="string" resultMap="member-resultmap">
		<include refid="member-select"/>
		where	 name=#{name}
	</select>
	
	<select id="selectMemberByPhone" parameterType="string" resultMap="member-resultmap">
		<include refid="member-select"/>
		where	 phone_no=#{phoneNo}
	</select>
	
	<select id="selectMemberState" resultType="string" resultMap="member-resultmap">
		<include refid="member-select"/>
		member_id=#{id}
	</select>
	
	<select id="selectAllMember" parameterType="map" resultMap="member-resultmap">
		<include refid="member-select"/>
		<choose>
				<when test="command == 'member_id'">
					where member_id = #{info}
				</when>
				<when test="command == 'member_name'">
					where name = #{info}
				</when>
				<when test="command == 'member_nickname'">
					where nickname = #{info}
				</when>
				<when test="command == 'grade'">
					where grade = #{info}
				</when>
			</choose>
	</select>
	
	<!-- Paging 추가 -->
	<select id="selectAllMemberPaging" parameterType="map" resultMap="member-resultmap">
		select member_id, member_password, name, nickname, birth, sex, zipcode, address, detail_address, email, phone_no, favorite_food, mileage, grade, join_date, state
		from (
			select ceil(rownum/#{contentsPerPage}) page, member_id, member_password, name, nickname, birth, sex, zipcode, address, detail_address, email, phone_no, favorite_food, mileage, grade, join_date, state
			from (
					<include refid="member-select"/>
					order by join_date
			)
		) 
		where page = #{pageNo}
	</select>
	
	<select id="selectTotalMemberCount" resultType="_int">
		select count(member_id) from member
	</select>
	
	<select id="selectAllMemberByInfo" parameterType="map" resultMap="member-resultmap">
		select member_id, member_password, name, nickname, birth, sex, zipcode, address, detail_address, email, phone_no, favorite_food, mileage, grade, join_date, state
		from (
			select ceil(rownum/#{contentsPerPage}) page, member_id, member_password, name, nickname, birth, sex, zipcode, address, detail_address, email, phone_no, favorite_food, mileage, grade, join_date, state
			from (
					<include refid="member-select"/>
					<choose>
						<when test="command == 'member_id'">
							where member_id = #{info} order by join_date
						</when>
						<when test="command == 'member_name'">
							where name = #{info} order by join_date
						</when>
						<when test="command == 'member_nickname'">
							where nickname = #{info} order by join_date
						</when>
						<when test="command == 'grade'">
							where grade = #{info} order by join_date
						</when>
						<when test="command == 'state'">
							where state = #{info} order by join_date
						</when>
					</choose>
					
					<if test="command == 'sort'">
						<choose>
							<when test="info == 'sortLatest'">
								order by join_date desc
							</when>
							<when test="info == 'sortLate'">
								order by join_date asc
							</when>
							<when test="info == 'sortId'">
								order by member_id
							</when>
							<when test="info == 'sortName'">
								order by name
							</when>
							<otherwise>
								order by join_date
							</otherwise>
						</choose>
					</if>
			)
		) 
		where page = #{pageNo} 
	</select>
	
	<select id="selectTotalMemberCountByInfo" resultType="_int" parameterType="map">
		select count(member_id) from member 
		<choose>
			<when test="command == 'member_id'">
				where member_id = #{info}
			</when>
			<when test="command == 'member_name'">
				where name = #{info}
			</when>
			<when test="command == 'member_nickname'">
				where nickname = #{info}
			</when>
			<when test="command == 'grade'">
				where grade = #{info}
			</when>
			<when test="command == 'state'">
				where state = #{info}
			</when>
			<otherwise></otherwise>
		</choose>
	</select>
	
</mapper>
