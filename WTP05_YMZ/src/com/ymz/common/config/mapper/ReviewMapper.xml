<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="review.dao.ReviewMapper">

	<sql id="review-select">
		select  review_no, 
				title, 
				content, 
				hits, 
				recommend, 
				reg_date, 
				member_id,
				(select count(*) from REVIEW_REPLY where review_reply.review_no = review.review_no) reply_count
		from review
	</sql>
	
	<resultMap type="review" id="review-resultmap">
		<id column="review_no" property="reviewNo"/>
		<result column="title" property="title"/>
		<result column="content" property="content"/>
		<result column="hits" property="hits"/>
		<result column="recommend" property="recommend"/>
		<result column="reg_date" property="regDate"/>
		<result column="member_id" property="memberId"/>
		<result column="reply_count" property="replyCount"/>
		<result column="nickname" property="nickname"/>
	</resultMap>
	
	<!-- 등록 -->
	<insert id="insertReview" parameterType="review">
		<selectKey keyProperty="reviewNo" resultType="_int" order="BEFORE">
			select review_no_seq.nextval from dual
		</selectKey>
		insert into review (review_no, title, content, hits, recommend, reg_date, member_id)
		values (#{reviewNo}, #{title}, #{content}, #{hits}, #{recommend}, to_char(sysdate, 'yyyy-mm-dd HH24:MI:SS'), #{memberId})
	</insert>

	<!-- 수정 -->
	<update id="updateReview" parameterType="review">
		update  review
		set		title=#{title},
				content=#{content}
		where	review_no=#{reviewNo} and member_id=#{memberId}
	</update>
	
	<!-- 삭제 -->

	<delete id="deleteReview" parameterType="review">
		delete from review r
		where r.review_no=#{reviewNo} 
		
	</delete>
	
	<!-- 조회 -->
	<select id="selectReviewByNo" resultMap="review-resultmap" parameterType="int">
		select  review_no, 
				title, 
				content, 
				hits, 
				nickname,
				recommend, 
				reg_date, 
				r.member_id,
				(select count(*) from REVIEW_REPLY where review_reply.review_no = r.review_no) reply_count
		from review r, member m
		where 1=1 and review_no=#{reviewNo} and r.member_id = m.member_id
	</select>
	
	<!-- 조회수 증가 -->
	<select id="updateHits" parameterType="int">
		update review
		set hits = hits + 1
		where review_no=#{reviewNo}
	</select>
	
	<!-- 추천수 조회 -->
	<select id="selectRecommendReview" parameterType="map" resultType="_int">
		select count(*)
		from review_recommend
		where review_no=#{number} and member_id=#{id}
	</select>
	
	<!-- 추천 테이블 입력 -->
	<select id="insertRecommendReview" parameterType="map">
		insert into review_recommend(review_no, member_id) 
		values (#{number}, #{id})
	</select>
	
	<!-- 추천수 증가 -->
	<select id="recommendReview" parameterType="int">
		update review
		set recommend = recommend + 1
		where review_no=#{reviewNo} 
	</select>
	
	<!-- 공지글 목록 조회 -->
	<select id="selectNotice" resultMap="review-resultmap">
		select review_no, title, content, hits, recommend, reg_date, nickname
		from review r, member m
		where r.member_id = m.member_id and m.grade = 'master' 
	</select>
	
	<!-- 리뷰 목록 페이징 -->
	<select id="selectAllReviewPaging" parameterType="map" resultMap="review-resultmap">
		select review_no, title, content, hits, recommend, reg_date, member_id, reply_count
		from (
				select ceil(rownum/#{contentsPerPage}) page, 
					   review_no, title, content, hits, 
					   recommend, reg_date, member_id, reply_count
				from (
						<include refid="review-select"/>
						order by reg_date desc
			)
		) 
		where	page = #{pageNo}
	</select>
	
	<!-- 리뷰 정렬 페이징 -->
		<select id="ReviewSortPaging" parameterType="map" resultMap="review-resultmap">
		select review_no, title, content, hits, recommend, 
			   reg_date, nickname,
		 	   member_id, reply_count
		from (
				select ceil(rownum/#{contentsPerPage}) page, 
					   review_no, title, content, hits, nickname,
					   recommend, reg_date, member_id, reply_count
				from (
						select  review_no, 
								title, 
								content, 
								hits, 
								recommend, 
								reg_date,
								m.member_id member_id,
								m.nickname nickname,
								(select count(*) from REVIEW_REPLY where review_reply.review_no = review.review_no) reply_count
						from 	review, member m
						where 1=1
						and review.member_id = m.member_id and m.grade != 'master'
						<choose>
							<when test="searchType=='title'">
								and title like '%'||#{query}||'%'
							</when>
							<when test="searchType=='id'">
								and review.member_id = #{query}
							</when>
							<when test="searchType=='nickname'">
								and m.nickname = #{query}
							</when>
						</choose>
						<choose>
							<when test="sortType=='latest'">
									order by reg_date desc
							</when>
							<when test="sortType=='recommend'">
								order by recommend desc
							</when>
							<when test="sortType=='hits'">
								order by hits desc
							</when>
						</choose>
			)
		) 
		where	page = #{pageNo}
	</select>
	
	<!-- 전체 게시물 수  -->
	<select id="selectTotalReviewCount" resultType="_int">
		select count(review_no) from review
	</select>
	
	<!-- 검색된 전체 게시물 수  -->
	<select id="selectSearchReviewCount" parameterType="map" resultType="_int">
		select count(review_no) from review r, member m
		where 1=1 and r.member_id = m.member_id
		<choose>
						<when test="searchType=='title'">
							and title like '%'||#{query}||'%'
						</when>
						<when test="searchType=='id'">
							and r.member_id = #{query}
						</when>
						<when test="searchType=='nickname'">
							and nickname = #{query}
						</when>
		</choose>
	</select>
	
	<!-- 오늘 인기글(조회순) -->
	<select id="selectTodayBestHits" resultMap="review-resultmap" parameterType="String">
		select review_no, title, hits
		from(
			select review_no, title, hits
			from review
			where substr(reg_date, 1,10) = #{today}
			ORDER BY HITS desc   
		)
		where rownum <![CDATA[<]]> 6
	</select>
	
	<!-- 이번달 인기글(추천순) -->
	<select id="selectMonthBestHits" resultMap="review-resultmap" parameterType="String">
		select review_no, title
		from(
			select review_no, title, recommend
			from review
			where substr(reg_date, 1,7) = #{month}
			ORDER BY recommend desc
			)
		where rownum <![CDATA[<]]> 6
	</select>
	
		<!-- 이번달 인기글(댓글순) -->
	<select id="selectMonthReply" resultMap="review-resultmap" parameterType="String">
		select review_no, title, reply_count
		from(
			select review_no, title, (select count(*) from REVIEW_REPLY where review_reply.review_no = r.review_no) reply_count
			from review r
			where substr(reg_date, 1,7) = #{month}
			ORDER BY reply_count desc
			)
		where rownum <![CDATA[<]]> 6
	</select>
</mapper>
